//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source top.tlv 46

//_\SV
   // Include Tiny Tapeout Lab.
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlv_lib/tiny_tapeout_lib.tlv"// Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlv_lib/fpga_includes.tlv"
   // Included URL: "https://raw.githubusercontent.com/efabless/chipcraft---mest-course/main/tlv_lib/risc-v_shell_lib.tlv"// Included URL: "https://raw.githubusercontent.com/stevehoover/warp-v_includes/450357b4993fa480e7fca57dc346e39cba21b6bc/risc-v_defs.tlv"
//_\source top.tlv 295

//_\SV

// ================================================
// A simple Makerchip Verilog test bench driving random stimulus.
// Modify the module contents to your needs.
// ================================================

module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);
   // Tiny tapeout I/O signals.
    logic [7:0] ui_in, uo_out;
    logic [7:0] uio_in,  uio_out, uio_oe;
    assign uio_in = 8'b0;
    logic ena = 1'b0;
    logic rst_n = ! reset;

    // Instantiate the Tiny Tapeout module.
    tt_um_riscv_spi_wrapper tt(.*);

    // Passed/failed to control Makerchip simulation, passed from Tiny Tapeout module's uo_out pins.
    //assign passed = uo_out[6];
    //assign failed = uo_out[7];
endmodule


// Provide a wrapper module to debounce input signals if requested.

//_\SV

//_\SV
module spi_wrapper
(
  // Control/Data Signals
  input logic clk,                       // system clock
  input logic rst_n,                     // active-low reset

  // CSR
  output logic [7:0] rx_buff,             // MOSI buffer - populates when SPI recieves a full byte
  output logic rx_valid,                  // pulsed if successfully recieved a full byte
  input logic [7:0] tx_buff,             // MISO buffer - pulled into r_tx_buff when tx_valid is set high by the CPU (NOT IMPLEMENTED)
  input logic tx_valid,                   // pulsed if ready to transmit data (NOT IMPLEMENTED)
  output logic mode,                      // 0 if boot, 1 if echo
  output logic cmd_error,                 // asserts when an invalid cmd is given, must reset to clear

  // CPU program signals
  output logic cpu_rst_n,                // hold CPU in reset when programming in boot mode
  output logic imem_wr_en,                // write enable for instruction memory
  output logic [31:0] prog_instr,         // instruction used to write to memory
  output logic [3:0] prog_addr,           // address used to write to memory

  // SPI Interface
  input logic sclk,                      // SPI clock
  input logic cs,                        // chip select (active-low)
  input logic mosi,                      // SPI recieve data
  output logic miso                      // SPI transmit data
);

  logic [2:0] rx_bit_count;
  logic [7:0] r_rx_buff;
  logic [7:0] r_rx_buff_temp;
  logic rx1_done, rx2_done, rx3_done;    // clock domain crossing signals

  logic [7:0] rx_cmd;            		   // command recieved in the last byte
  logic rx_grab_cmd_n;           		   // flip-flop between decoding command
                                       // or operating on current data byte

  logic [2:0] tx_bit_count;
  logic [7:0] r_tx_buff;
  logic response_valid;                  // echo mode internal tx start signal
  logic miso_bit;
  assign miso = miso_bit;

  logic [7:0] hh_byte;                   // instruction [31:24]
  logic [7:0] hl_byte;                   // instruction [23:16]
  logic [7:0] lh_byte;                   // instruction [15:8]
  logic [7:0] ll_byte;                   // instruction [7:0]
  logic [3:0] imem_address;


  // rx spi and global cock domain crossing
  // assert rx_valid for 1 cycle when a full byte is recieved
  always @(posedge clk) begin
     if (~rst_n) begin // sync reset
        rx2_done <= 1'b0;
        rx3_done <= 1'b0;

        rx_valid <= 1'b0;
        rx_buff <= 8'b00;
     end else begin
        // clock domain crossing between clk and sclk
     	  rx2_done <= rx1_done;
        rx3_done <= rx2_done;

        if(rx3_done == 1'b0 && rx2_done == 1'b1) begin // rising edge
           // done recieving, set rx data valid and load output buffer
           rx_valid <= 1'b1;
           rx_buff <= r_rx_buff;
        end else begin
           // clear rx data valid, rx_buff persists
           rx_valid <= 1'b0;
        end
     end
  end

  // receive mosi bits from spi clk
  always @(posedge sclk) begin
	  if (cs) begin // hold in reset when not selected
        rx_bit_count <= 3'b0;
        rx1_done <= 1'b0;
     end else begin
        rx_bit_count <= rx_bit_count + 1;              // increment bit count
        r_rx_buff_temp <= {r_rx_buff_temp[6:0], mosi}; // shift in bits MSB first to temp buffer

        if (rx_bit_count == 3'b111) begin
           rx1_done <= 1'b1;                           // signal recieved full byte
           r_rx_buff <= {r_rx_buff_temp[6:0], mosi};   // shift in last bit to temp buffer
        end else if(rx_bit_count == 3'b010) begin      // de-assert when starting to recieve next byte
           rx1_done <= 1'b0;
        end
     end
  end

  // register tx byte when tx_valid pulse comes, initiating transfer
  // NOT IMPLEMENTED - driving signals tied to ground and caused multiple driver errors on r_tx_buff
  /*
  always @(posedge clk) begin
     if(~rst_n) begin
        r_tx_buff <= 8'h00;
     end else begin
        if(tx_valid) begin
           r_tx_buff <= tx_buff;
        end
     end
  end
  */

  // clock out tx byte when there is a tx byte (echo)
  always @(posedge sclk) begin
     if (cs) begin
        tx_bit_count <= 3'b111;   // send MSB first
        miso_bit <= r_tx_buff[7]; // reset to MSB
     end else begin
        // with 2 modes - only able to tx if in echo mode
        // future work would implement cpu control over tx_buff and tx_valid
        if (mode == 1'b1 && response_valid) begin
           tx_bit_count <= tx_bit_count - 1;
           miso_bit <= r_tx_buff[tx_bit_count];
        end else begin
           tx_bit_count <= 3'b111;
        end
     end
  end

  // internal spi commands
  always @(posedge clk) begin
     if (~rst_n) begin // sync reset

        cpu_rst_n <= 1'b0;
        mode <= 1'b0;
        cmd_error <= 1'b0;

        hh_byte <= 8'h00;
        hl_byte <= 8'h00;
        lh_byte <= 8'h00;
        ll_byte <= 8'h00;
        prog_instr <= 32'h00_00_00_00;

        imem_wr_en <= 1'b0;
        imem_address <= 4'h0;
        prog_addr <= 4'h0;

        rx_grab_cmd_n <= 1'b0;
        rx_cmd <= 8'h00;

        response_valid <= 1'b0;
        r_tx_buff <= 8'h00;
     end else if (rx3_done == 1'b0 && rx2_done == 1'b1) begin // if recieved a full byte - rising-edge
        if (~mode) begin // boot mode
           cpu_rst_n <= 1'b0;                                 // assert cpu reset when in boot mode
           if (~rx_grab_cmd_n) begin // command
              rx_cmd <= r_rx_buff;
              rx_grab_cmd_n <= 1'b1;                          // next byte is data
           end else if(rx_grab_cmd_n) begin // data
              case (rx_cmd)                                   // decode last command and operate on current byte
                8'hc0 : begin
                         ll_byte <= r_rx_buff;
                        end
                8'hc1 : begin
                         lh_byte <= r_rx_buff;
                        end
                8'hc2 : begin
                         hl_byte <= r_rx_buff;
                        end
                8'hc3 : begin
                         hh_byte <= r_rx_buff;
                        end
                8'hc4 : begin
                         imem_address <= r_rx_buff[3:0];
                        end
                8'hc5 : begin
                         prog_addr <= imem_address;
                         prog_instr <= {hh_byte, hl_byte, lh_byte, ll_byte};
                         imem_wr_en <= 1'b1;
                        end
                8'hc6 : begin
                         mode <= 1'b1;                        // enter echo mode
                        end
                8'hc7 : begin
                         mode <= 1'b0;                        // do nothing
                         end
                default: begin
                         cmd_error <= 1'b1;                   // invalid cmd, must reset to clear
                         end
               endcase
               rx_grab_cmd_n <= 1'b0;                         // next byte is a cmd
           end // end rx_grab_cmd_n
        end else begin // echo mode
           cpu_rst_n <= 1'b1;                                 // de-assert cpu reset when not in boot
           r_tx_buff <= r_rx_buff;                            // load TRANSMIT buffer with RECIEVED buffer
           response_valid <= 1'b1;
           if(r_rx_buff == 8'hc7) begin                       // re-enter boot if in echo mode and cmd is recieved
              mode <= 1'b0;
           end
        end // end mode
     end else if(tx_bit_count == 3'b0) begin                  // de-assert response_valid after tx complete
        response_valid <= 1'b0;                               // (can probably move up into echo mode case)
     end else begin
        imem_wr_en <= 1'b0;                                   // de-assert write enable on cmd (only happens when doing nothing in boot mode)
     end // end byte recieved
  end // end spi internal command

endmodule

//_\SV



// =======================
// The Tiny Tapeout module
// =======================

module tt_um_riscv_spi_wrapper (
    input  logic [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output logic [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
    //   // The FPGA is based on TinyTapeout 3 which has no bidirectional I/Os (vs. TT6 for the ASIC).
    input  logic [7:0] uio_in,   // IOs: Bidirectional Input path
    output logic [7:0] uio_out,  // IOs: Bidirectional Output path
    output logic [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    //
    input  logic       ena,      // will go high when the design is enabled
    input  logic       clk,      // clock
    input  logic       rst_n     // reset_n - low to reset
);
   logic passed, failed;
   assign uo_out[7:6] = {failed, passed};

   // [31:18] - unused
   // [17] [16:9] - tx_valid + tx_buff (NOT IMPLEMENTED)
   // [8] [7:0] - rx_valid + rx_buff
   logic [31:0] spi_csr;
   logic [31:0] spi_prog_instr;
   logic [3:0] spi_prog_addr;
   logic spi_imem_wr_en;
   logic spi_cpu_rst_n;

   // resets
   logic spi_cpu_rst = ! spi_cpu_rst_n;
   logic reset = ! rst_n;

   // unused signals
   assign uio_oe = 8'b0;
   assign uio_out = 8'b0;
   assign uo_out[2:0] = 3'b0;
   assign spi_csr[31:18] = 14'b0;
   assign spi_csr[17:9] = 9'b0;

   spi_wrapper spi (
		.clk(clk),
      .rst_n(rst_n),

      // control and status registers
      .mode(uo_out[4]),
      .rx_buff(spi_csr[7:0]),
      .rx_valid(spi_csr[8]),
      .tx_buff(spi_csr[16:9]),
      .tx_valid(spi_csr[17]),

      // cpu boot signals
      .cpu_rst_n(spi_cpu_rst_n),
      .cmd_error(uo_out[5]),
      .imem_wr_en(spi_imem_wr_en),
      .prog_instr(spi_prog_instr),
      .prog_addr(spi_prog_addr),

      // spi interface
      .sclk(ui_in[0]),
      .cs(ui_in[1]),
      .mosi(ui_in[2]),
      .miso(uo_out[3])

   );

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, dmem, imem, input_label, leds, switch, xreg;


//
// Signals declared top-level.
//

// For $slideswitch.
logic [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
logic L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
logic [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
logic [6:0] L0_sseg_segment_n_a0;

// For /fpga_pins/fpga|cpu$br_tgt_pc.
logic [31:0] FpgaPins_Fpga_CPU_br_tgt_pc_a2,
             FpgaPins_Fpga_CPU_br_tgt_pc_a3;

// For /fpga_pins/fpga|cpu$cycle_count.
logic [31:0] FpgaPins_Fpga_CPU_cycle_count_a4,
             FpgaPins_Fpga_CPU_cycle_count_a5;

// For /fpga_pins/fpga|cpu$dec_bits.
logic [10:0] FpgaPins_Fpga_CPU_dec_bits_a1;

// For /fpga_pins/fpga|cpu$dmem_addr.
logic [2:0] FpgaPins_Fpga_CPU_dmem_addr_a4;

// For /fpga_pins/fpga|cpu$dmem_rd_data.
logic [31:0] FpgaPins_Fpga_CPU_dmem_rd_data_a4;

// For /fpga_pins/fpga|cpu$dmem_rd_en.
logic FpgaPins_Fpga_CPU_dmem_rd_en_a4;

// For /fpga_pins/fpga|cpu$dmem_wr_data.
logic [31:0] FpgaPins_Fpga_CPU_dmem_wr_data_a4;

// For /fpga_pins/fpga|cpu$dmem_wr_en.
logic FpgaPins_Fpga_CPU_dmem_wr_en_a4;

// For /fpga_pins/fpga|cpu$func3.
logic [2:0] FpgaPins_Fpga_CPU_func3_a1;

// For /fpga_pins/fpga|cpu$func3_valid.
logic FpgaPins_Fpga_CPU_func3_valid_a1;

// For /fpga_pins/fpga|cpu$func7.
logic [6:0] FpgaPins_Fpga_CPU_func7_a1;

// For /fpga_pins/fpga|cpu$func7_valid.
logic FpgaPins_Fpga_CPU_func7_valid_a1;

// For /fpga_pins/fpga|cpu$imem_addr.
logic [3:0] FpgaPins_Fpga_CPU_imem_addr_a0,
            FpgaPins_Fpga_CPU_imem_addr_a1;

// For /fpga_pins/fpga|cpu$imem_rd_data.
logic [31:0] FpgaPins_Fpga_CPU_imem_rd_data_a1;

// For /fpga_pins/fpga|cpu$imem_rd_en.
logic FpgaPins_Fpga_CPU_imem_rd_en_a0,
      FpgaPins_Fpga_CPU_imem_rd_en_a1;

// For /fpga_pins/fpga|cpu$imem_wr_data.
logic [31:0] FpgaPins_Fpga_CPU_imem_wr_data_a1;

// For /fpga_pins/fpga|cpu$imem_wr_en.
logic FpgaPins_Fpga_CPU_imem_wr_en_a1;

// For /fpga_pins/fpga|cpu$imm.
logic [31:0] FpgaPins_Fpga_CPU_imm_a1,
             FpgaPins_Fpga_CPU_imm_a2,
             FpgaPins_Fpga_CPU_imm_a3;

// For /fpga_pins/fpga|cpu$instr.
logic [31:0] FpgaPins_Fpga_CPU_instr_a1;

// For /fpga_pins/fpga|cpu$is_add.
logic FpgaPins_Fpga_CPU_is_add_a1,
      FpgaPins_Fpga_CPU_is_add_a2,
      FpgaPins_Fpga_CPU_is_add_a3;

// For /fpga_pins/fpga|cpu$is_addi.
logic FpgaPins_Fpga_CPU_is_addi_a1,
      FpgaPins_Fpga_CPU_is_addi_a2,
      FpgaPins_Fpga_CPU_is_addi_a3;

// For /fpga_pins/fpga|cpu$is_and.
logic FpgaPins_Fpga_CPU_is_and_a1,
      FpgaPins_Fpga_CPU_is_and_a2,
      FpgaPins_Fpga_CPU_is_and_a3;

// For /fpga_pins/fpga|cpu$is_andi.
logic FpgaPins_Fpga_CPU_is_andi_a1,
      FpgaPins_Fpga_CPU_is_andi_a2,
      FpgaPins_Fpga_CPU_is_andi_a3;

// For /fpga_pins/fpga|cpu$is_auipc.
logic FpgaPins_Fpga_CPU_is_auipc_a1,
      FpgaPins_Fpga_CPU_is_auipc_a2,
      FpgaPins_Fpga_CPU_is_auipc_a3;

// For /fpga_pins/fpga|cpu$is_b_instr.
logic FpgaPins_Fpga_CPU_is_b_instr_a1;

// For /fpga_pins/fpga|cpu$is_beq.
logic FpgaPins_Fpga_CPU_is_beq_a1,
      FpgaPins_Fpga_CPU_is_beq_a2,
      FpgaPins_Fpga_CPU_is_beq_a3;

// For /fpga_pins/fpga|cpu$is_bge.
logic FpgaPins_Fpga_CPU_is_bge_a1,
      FpgaPins_Fpga_CPU_is_bge_a2,
      FpgaPins_Fpga_CPU_is_bge_a3;

// For /fpga_pins/fpga|cpu$is_bgeu.
logic FpgaPins_Fpga_CPU_is_bgeu_a1,
      FpgaPins_Fpga_CPU_is_bgeu_a2,
      FpgaPins_Fpga_CPU_is_bgeu_a3;

// For /fpga_pins/fpga|cpu$is_blt.
logic FpgaPins_Fpga_CPU_is_blt_a1,
      FpgaPins_Fpga_CPU_is_blt_a2,
      FpgaPins_Fpga_CPU_is_blt_a3;

// For /fpga_pins/fpga|cpu$is_bltu.
logic FpgaPins_Fpga_CPU_is_bltu_a1,
      FpgaPins_Fpga_CPU_is_bltu_a2,
      FpgaPins_Fpga_CPU_is_bltu_a3;

// For /fpga_pins/fpga|cpu$is_bne.
logic FpgaPins_Fpga_CPU_is_bne_a1,
      FpgaPins_Fpga_CPU_is_bne_a2,
      FpgaPins_Fpga_CPU_is_bne_a3;

// For /fpga_pins/fpga|cpu$is_i_instr.
logic FpgaPins_Fpga_CPU_is_i_instr_a1;

// For /fpga_pins/fpga|cpu$is_j_instr.
logic FpgaPins_Fpga_CPU_is_j_instr_a1;

// For /fpga_pins/fpga|cpu$is_jal.
logic FpgaPins_Fpga_CPU_is_jal_a1,
      FpgaPins_Fpga_CPU_is_jal_a2,
      FpgaPins_Fpga_CPU_is_jal_a3;

// For /fpga_pins/fpga|cpu$is_jalr.
logic FpgaPins_Fpga_CPU_is_jalr_a1,
      FpgaPins_Fpga_CPU_is_jalr_a2,
      FpgaPins_Fpga_CPU_is_jalr_a3;

// For /fpga_pins/fpga|cpu$is_jump.
logic FpgaPins_Fpga_CPU_is_jump_a1,
      FpgaPins_Fpga_CPU_is_jump_a2,
      FpgaPins_Fpga_CPU_is_jump_a3;

// For /fpga_pins/fpga|cpu$is_load.
logic FpgaPins_Fpga_CPU_is_load_a1,
      FpgaPins_Fpga_CPU_is_load_a2,
      FpgaPins_Fpga_CPU_is_load_a3,
      FpgaPins_Fpga_CPU_is_load_a4;

// For /fpga_pins/fpga|cpu$is_lui.
logic FpgaPins_Fpga_CPU_is_lui_a1,
      FpgaPins_Fpga_CPU_is_lui_a2,
      FpgaPins_Fpga_CPU_is_lui_a3;

// For /fpga_pins/fpga|cpu$is_or.
logic FpgaPins_Fpga_CPU_is_or_a1,
      FpgaPins_Fpga_CPU_is_or_a2,
      FpgaPins_Fpga_CPU_is_or_a3;

// For /fpga_pins/fpga|cpu$is_ori.
logic FpgaPins_Fpga_CPU_is_ori_a1,
      FpgaPins_Fpga_CPU_is_ori_a2,
      FpgaPins_Fpga_CPU_is_ori_a3;

// For /fpga_pins/fpga|cpu$is_r_instr.
logic FpgaPins_Fpga_CPU_is_r_instr_a1;

// For /fpga_pins/fpga|cpu$is_s_instr.
logic FpgaPins_Fpga_CPU_is_s_instr_a1,
      FpgaPins_Fpga_CPU_is_s_instr_a2,
      FpgaPins_Fpga_CPU_is_s_instr_a3,
      FpgaPins_Fpga_CPU_is_s_instr_a4;

// For /fpga_pins/fpga|cpu$is_sll.
logic FpgaPins_Fpga_CPU_is_sll_a1,
      FpgaPins_Fpga_CPU_is_sll_a2,
      FpgaPins_Fpga_CPU_is_sll_a3;

// For /fpga_pins/fpga|cpu$is_slli.
logic FpgaPins_Fpga_CPU_is_slli_a1,
      FpgaPins_Fpga_CPU_is_slli_a2,
      FpgaPins_Fpga_CPU_is_slli_a3;

// For /fpga_pins/fpga|cpu$is_slt.
logic FpgaPins_Fpga_CPU_is_slt_a1,
      FpgaPins_Fpga_CPU_is_slt_a2,
      FpgaPins_Fpga_CPU_is_slt_a3;

// For /fpga_pins/fpga|cpu$is_slti.
logic FpgaPins_Fpga_CPU_is_slti_a1,
      FpgaPins_Fpga_CPU_is_slti_a2,
      FpgaPins_Fpga_CPU_is_slti_a3;

// For /fpga_pins/fpga|cpu$is_sltiu.
logic FpgaPins_Fpga_CPU_is_sltiu_a1,
      FpgaPins_Fpga_CPU_is_sltiu_a2,
      FpgaPins_Fpga_CPU_is_sltiu_a3;

// For /fpga_pins/fpga|cpu$is_sltu.
logic FpgaPins_Fpga_CPU_is_sltu_a1,
      FpgaPins_Fpga_CPU_is_sltu_a2,
      FpgaPins_Fpga_CPU_is_sltu_a3;

// For /fpga_pins/fpga|cpu$is_sra.
logic FpgaPins_Fpga_CPU_is_sra_a1,
      FpgaPins_Fpga_CPU_is_sra_a2,
      FpgaPins_Fpga_CPU_is_sra_a3;

// For /fpga_pins/fpga|cpu$is_srai.
logic FpgaPins_Fpga_CPU_is_srai_a1,
      FpgaPins_Fpga_CPU_is_srai_a2,
      FpgaPins_Fpga_CPU_is_srai_a3;

// For /fpga_pins/fpga|cpu$is_srl.
logic FpgaPins_Fpga_CPU_is_srl_a1,
      FpgaPins_Fpga_CPU_is_srl_a2,
      FpgaPins_Fpga_CPU_is_srl_a3;

// For /fpga_pins/fpga|cpu$is_srli.
logic FpgaPins_Fpga_CPU_is_srli_a1,
      FpgaPins_Fpga_CPU_is_srli_a2,
      FpgaPins_Fpga_CPU_is_srli_a3;

// For /fpga_pins/fpga|cpu$is_sub.
logic FpgaPins_Fpga_CPU_is_sub_a1,
      FpgaPins_Fpga_CPU_is_sub_a2,
      FpgaPins_Fpga_CPU_is_sub_a3;

// For /fpga_pins/fpga|cpu$is_u_instr.
logic FpgaPins_Fpga_CPU_is_u_instr_a1;

// For /fpga_pins/fpga|cpu$is_xor.
logic FpgaPins_Fpga_CPU_is_xor_a1,
      FpgaPins_Fpga_CPU_is_xor_a2,
      FpgaPins_Fpga_CPU_is_xor_a3;

// For /fpga_pins/fpga|cpu$is_xori.
logic FpgaPins_Fpga_CPU_is_xori_a1,
      FpgaPins_Fpga_CPU_is_xori_a2,
      FpgaPins_Fpga_CPU_is_xori_a3;

// For /fpga_pins/fpga|cpu$jalr_tgt_pc.
logic [31:0] FpgaPins_Fpga_CPU_jalr_tgt_pc_a2,
             FpgaPins_Fpga_CPU_jalr_tgt_pc_a3;

// For /fpga_pins/fpga|cpu$ld_data.
logic [31:0] FpgaPins_Fpga_CPU_ld_data_a4,
             FpgaPins_Fpga_CPU_ld_data_a5;

// For /fpga_pins/fpga|cpu$opcode.
logic [6:0] FpgaPins_Fpga_CPU_opcode_a1;

// For /fpga_pins/fpga|cpu$pc.
logic [31:0] FpgaPins_Fpga_CPU_pc_a0,
             FpgaPins_Fpga_CPU_pc_a1,
             FpgaPins_Fpga_CPU_pc_a2,
             FpgaPins_Fpga_CPU_pc_a3;

// For /fpga_pins/fpga|cpu$rd.
logic [4:0] FpgaPins_Fpga_CPU_rd_a1,
            FpgaPins_Fpga_CPU_rd_a2,
            FpgaPins_Fpga_CPU_rd_a3,
            FpgaPins_Fpga_CPU_rd_a4,
            FpgaPins_Fpga_CPU_rd_a5;

// For /fpga_pins/fpga|cpu$rd_valid.
logic FpgaPins_Fpga_CPU_rd_valid_a1,
      FpgaPins_Fpga_CPU_rd_valid_a2,
      FpgaPins_Fpga_CPU_rd_valid_a3;

// For /fpga_pins/fpga|cpu$reset.
logic FpgaPins_Fpga_CPU_reset_a0,
      FpgaPins_Fpga_CPU_reset_a1,
      FpgaPins_Fpga_CPU_reset_a2,
      FpgaPins_Fpga_CPU_reset_a3,
      FpgaPins_Fpga_CPU_reset_a4;

// For /fpga_pins/fpga|cpu$result.
logic [31:0] FpgaPins_Fpga_CPU_result_a3;
logic [4:2] FpgaPins_Fpga_CPU_result_a4;

// For /fpga_pins/fpga|cpu$rf_rd_data1.
logic [31:0] FpgaPins_Fpga_CPU_rf_rd_data1_a2;

// For /fpga_pins/fpga|cpu$rf_rd_data2.
logic [31:0] FpgaPins_Fpga_CPU_rf_rd_data2_a2;

// For /fpga_pins/fpga|cpu$rf_rd_en1.
logic FpgaPins_Fpga_CPU_rf_rd_en1_a2;

// For /fpga_pins/fpga|cpu$rf_rd_en2.
logic FpgaPins_Fpga_CPU_rf_rd_en2_a2;

// For /fpga_pins/fpga|cpu$rf_rd_index1.
logic [4:0] FpgaPins_Fpga_CPU_rf_rd_index1_a2;

// For /fpga_pins/fpga|cpu$rf_rd_index2.
logic [4:0] FpgaPins_Fpga_CPU_rf_rd_index2_a2;

// For /fpga_pins/fpga|cpu$rf_wr_data.
logic [31:0] FpgaPins_Fpga_CPU_rf_wr_data_a3;

// For /fpga_pins/fpga|cpu$rf_wr_en.
logic FpgaPins_Fpga_CPU_rf_wr_en_a3;

// For /fpga_pins/fpga|cpu$rf_wr_index.
logic [4:0] FpgaPins_Fpga_CPU_rf_wr_index_a3;

// For /fpga_pins/fpga|cpu$rs1.
logic [4:0] FpgaPins_Fpga_CPU_rs1_a1,
            FpgaPins_Fpga_CPU_rs1_a2;

// For /fpga_pins/fpga|cpu$rs1_valid.
logic FpgaPins_Fpga_CPU_rs1_valid_a1,
      FpgaPins_Fpga_CPU_rs1_valid_a2;

// For /fpga_pins/fpga|cpu$rs2.
logic [4:0] FpgaPins_Fpga_CPU_rs2_a1,
            FpgaPins_Fpga_CPU_rs2_a2;

// For /fpga_pins/fpga|cpu$rs2_valid.
logic FpgaPins_Fpga_CPU_rs2_valid_a1,
      FpgaPins_Fpga_CPU_rs2_valid_a2;

// For /fpga_pins/fpga|cpu$sltiu_rslt.
logic FpgaPins_Fpga_CPU_sltiu_rslt_a3;

// For /fpga_pins/fpga|cpu$sltu_rslt.
logic FpgaPins_Fpga_CPU_sltu_rslt_a3;

// For /fpga_pins/fpga|cpu$spi_csr_out.
logic [31:0] FpgaPins_Fpga_CPU_spi_csr_out_a4;

// For /fpga_pins/fpga|cpu$spi_current_instr.
logic [31:0] FpgaPins_Fpga_CPU_spi_current_instr_a4;

// For /fpga_pins/fpga|cpu$src1_value.
logic [31:0] FpgaPins_Fpga_CPU_src1_value_a2,
             FpgaPins_Fpga_CPU_src1_value_a3;

// For /fpga_pins/fpga|cpu$src2_value.
logic [31:0] FpgaPins_Fpga_CPU_src2_value_a2,
             FpgaPins_Fpga_CPU_src2_value_a3,
             FpgaPins_Fpga_CPU_src2_value_a4;

// For /fpga_pins/fpga|cpu$taken_br.
logic FpgaPins_Fpga_CPU_taken_br_a3;

// For /fpga_pins/fpga|cpu$valid.
logic FpgaPins_Fpga_CPU_valid_a3,
      FpgaPins_Fpga_CPU_valid_a4;

// For /fpga_pins/fpga|cpu$valid_jump.
logic FpgaPins_Fpga_CPU_valid_jump_a3,
      FpgaPins_Fpga_CPU_valid_jump_a4,
      FpgaPins_Fpga_CPU_valid_jump_a5;

// For /fpga_pins/fpga|cpu$valid_load.
logic FpgaPins_Fpga_CPU_valid_load_a3,
      FpgaPins_Fpga_CPU_valid_load_a4,
      FpgaPins_Fpga_CPU_valid_load_a5;

// For /fpga_pins/fpga|cpu$valid_taken_br.
logic FpgaPins_Fpga_CPU_valid_taken_br_a3,
      FpgaPins_Fpga_CPU_valid_taken_br_a4,
      FpgaPins_Fpga_CPU_valid_taken_br_a5;

// For /fpga_pins/fpga|cpu/dmem$value.
logic [31:0] FpgaPins_Fpga_CPU_Dmem_value_a4 [7:0],
             FpgaPins_Fpga_CPU_Dmem_value_a5 [7:0];

// For /fpga_pins/fpga|cpu/imem$value.
logic [31:0] FpgaPins_Fpga_CPU_Imem_value_a1 [15:0],
             FpgaPins_Fpga_CPU_Imem_value_a2 [15:0];

// For /fpga_pins/fpga|cpu/xreg$value.
logic [31:0] FpgaPins_Fpga_CPU_Xreg_value_a3 [15:0],
             FpgaPins_Fpga_CPU_Xreg_value_a4 [15:0],
             FpgaPins_Fpga_CPU_Xreg_value_a5 [15:0];




   //
   // Scope: /fpga_pins
   //


      //
      // Scope: /fpga
      //


         //
         // Scope: |cpu
         //

            // Staging of $br_tgt_pc.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_br_tgt_pc_a3[31:0] <= FpgaPins_Fpga_CPU_br_tgt_pc_a2[31:0];

            // Staging of $cycle_count.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_cycle_count_a5[31:0] <= FpgaPins_Fpga_CPU_cycle_count_a4[31:0];

            // Staging of $imem_addr.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_imem_addr_a1[3:0] <= FpgaPins_Fpga_CPU_imem_addr_a0[3:0];

            // Staging of $imem_rd_en.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_imem_rd_en_a1 <= FpgaPins_Fpga_CPU_imem_rd_en_a0;

            // Staging of $imm.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_imm_a2[31:0] <= FpgaPins_Fpga_CPU_imm_a1[31:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_imm_a3[31:0] <= FpgaPins_Fpga_CPU_imm_a2[31:0];

            // Staging of $is_add.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_add_a2 <= FpgaPins_Fpga_CPU_is_add_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_add_a3 <= FpgaPins_Fpga_CPU_is_add_a2;

            // Staging of $is_addi.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_addi_a2 <= FpgaPins_Fpga_CPU_is_addi_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_addi_a3 <= FpgaPins_Fpga_CPU_is_addi_a2;

            // Staging of $is_and.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_and_a2 <= FpgaPins_Fpga_CPU_is_and_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_and_a3 <= FpgaPins_Fpga_CPU_is_and_a2;

            // Staging of $is_andi.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_andi_a2 <= FpgaPins_Fpga_CPU_is_andi_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_andi_a3 <= FpgaPins_Fpga_CPU_is_andi_a2;

            // Staging of $is_auipc.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_auipc_a2 <= FpgaPins_Fpga_CPU_is_auipc_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_auipc_a3 <= FpgaPins_Fpga_CPU_is_auipc_a2;

            // Staging of $is_beq.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_beq_a2 <= FpgaPins_Fpga_CPU_is_beq_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_beq_a3 <= FpgaPins_Fpga_CPU_is_beq_a2;

            // Staging of $is_bge.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bge_a2 <= FpgaPins_Fpga_CPU_is_bge_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bge_a3 <= FpgaPins_Fpga_CPU_is_bge_a2;

            // Staging of $is_bgeu.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bgeu_a2 <= FpgaPins_Fpga_CPU_is_bgeu_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bgeu_a3 <= FpgaPins_Fpga_CPU_is_bgeu_a2;

            // Staging of $is_blt.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_blt_a2 <= FpgaPins_Fpga_CPU_is_blt_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_blt_a3 <= FpgaPins_Fpga_CPU_is_blt_a2;

            // Staging of $is_bltu.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bltu_a2 <= FpgaPins_Fpga_CPU_is_bltu_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bltu_a3 <= FpgaPins_Fpga_CPU_is_bltu_a2;

            // Staging of $is_bne.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bne_a2 <= FpgaPins_Fpga_CPU_is_bne_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_bne_a3 <= FpgaPins_Fpga_CPU_is_bne_a2;

            // Staging of $is_jal.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jal_a2 <= FpgaPins_Fpga_CPU_is_jal_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jal_a3 <= FpgaPins_Fpga_CPU_is_jal_a2;

            // Staging of $is_jalr.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jalr_a2 <= FpgaPins_Fpga_CPU_is_jalr_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jalr_a3 <= FpgaPins_Fpga_CPU_is_jalr_a2;

            // Staging of $is_jump.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jump_a2 <= FpgaPins_Fpga_CPU_is_jump_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_jump_a3 <= FpgaPins_Fpga_CPU_is_jump_a2;

            // Staging of $is_load.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_load_a2 <= FpgaPins_Fpga_CPU_is_load_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_load_a3 <= FpgaPins_Fpga_CPU_is_load_a2;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_load_a4 <= FpgaPins_Fpga_CPU_is_load_a3;

            // Staging of $is_lui.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_lui_a2 <= FpgaPins_Fpga_CPU_is_lui_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_lui_a3 <= FpgaPins_Fpga_CPU_is_lui_a2;

            // Staging of $is_or.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_or_a2 <= FpgaPins_Fpga_CPU_is_or_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_or_a3 <= FpgaPins_Fpga_CPU_is_or_a2;

            // Staging of $is_ori.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_ori_a2 <= FpgaPins_Fpga_CPU_is_ori_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_ori_a3 <= FpgaPins_Fpga_CPU_is_ori_a2;

            // Staging of $is_s_instr.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_s_instr_a2 <= FpgaPins_Fpga_CPU_is_s_instr_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_s_instr_a3 <= FpgaPins_Fpga_CPU_is_s_instr_a2;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_s_instr_a4 <= FpgaPins_Fpga_CPU_is_s_instr_a3;

            // Staging of $is_sll.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sll_a2 <= FpgaPins_Fpga_CPU_is_sll_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sll_a3 <= FpgaPins_Fpga_CPU_is_sll_a2;

            // Staging of $is_slli.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slli_a2 <= FpgaPins_Fpga_CPU_is_slli_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slli_a3 <= FpgaPins_Fpga_CPU_is_slli_a2;

            // Staging of $is_slt.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slt_a2 <= FpgaPins_Fpga_CPU_is_slt_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slt_a3 <= FpgaPins_Fpga_CPU_is_slt_a2;

            // Staging of $is_slti.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slti_a2 <= FpgaPins_Fpga_CPU_is_slti_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_slti_a3 <= FpgaPins_Fpga_CPU_is_slti_a2;

            // Staging of $is_sltiu.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sltiu_a2 <= FpgaPins_Fpga_CPU_is_sltiu_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sltiu_a3 <= FpgaPins_Fpga_CPU_is_sltiu_a2;

            // Staging of $is_sltu.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sltu_a2 <= FpgaPins_Fpga_CPU_is_sltu_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sltu_a3 <= FpgaPins_Fpga_CPU_is_sltu_a2;

            // Staging of $is_sra.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sra_a2 <= FpgaPins_Fpga_CPU_is_sra_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sra_a3 <= FpgaPins_Fpga_CPU_is_sra_a2;

            // Staging of $is_srai.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srai_a2 <= FpgaPins_Fpga_CPU_is_srai_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srai_a3 <= FpgaPins_Fpga_CPU_is_srai_a2;

            // Staging of $is_srl.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srl_a2 <= FpgaPins_Fpga_CPU_is_srl_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srl_a3 <= FpgaPins_Fpga_CPU_is_srl_a2;

            // Staging of $is_srli.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srli_a2 <= FpgaPins_Fpga_CPU_is_srli_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_srli_a3 <= FpgaPins_Fpga_CPU_is_srli_a2;

            // Staging of $is_sub.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sub_a2 <= FpgaPins_Fpga_CPU_is_sub_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_sub_a3 <= FpgaPins_Fpga_CPU_is_sub_a2;

            // Staging of $is_xor.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_xor_a2 <= FpgaPins_Fpga_CPU_is_xor_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_xor_a3 <= FpgaPins_Fpga_CPU_is_xor_a2;

            // Staging of $is_xori.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_xori_a2 <= FpgaPins_Fpga_CPU_is_xori_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_is_xori_a3 <= FpgaPins_Fpga_CPU_is_xori_a2;

            // Staging of $jalr_tgt_pc.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_jalr_tgt_pc_a3[31:0] <= FpgaPins_Fpga_CPU_jalr_tgt_pc_a2[31:0];

            // Staging of $ld_data.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_ld_data_a5[31:0] <= FpgaPins_Fpga_CPU_ld_data_a4[31:0];

            // Staging of $pc.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_pc_a1[31:0] <= FpgaPins_Fpga_CPU_pc_a0[31:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_pc_a2[31:0] <= FpgaPins_Fpga_CPU_pc_a1[31:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_pc_a3[31:0] <= FpgaPins_Fpga_CPU_pc_a2[31:0];

            // Staging of $rd.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_a2[4:0] <= FpgaPins_Fpga_CPU_rd_a1[4:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_a3[4:0] <= FpgaPins_Fpga_CPU_rd_a2[4:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_a4[4:0] <= FpgaPins_Fpga_CPU_rd_a3[4:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_a5[4:0] <= FpgaPins_Fpga_CPU_rd_a4[4:0];

            // Staging of $rd_valid.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_valid_a2 <= FpgaPins_Fpga_CPU_rd_valid_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rd_valid_a3 <= FpgaPins_Fpga_CPU_rd_valid_a2;

            // Staging of $reset.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_reset_a1 <= FpgaPins_Fpga_CPU_reset_a0;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_reset_a2 <= FpgaPins_Fpga_CPU_reset_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_reset_a3 <= FpgaPins_Fpga_CPU_reset_a2;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_reset_a4 <= FpgaPins_Fpga_CPU_reset_a3;

            // Staging of $result.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_result_a4[4:2] <= FpgaPins_Fpga_CPU_result_a3[4:2];

            // Staging of $rs1.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rs1_a2[4:0] <= FpgaPins_Fpga_CPU_rs1_a1[4:0];

            // Staging of $rs1_valid.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rs1_valid_a2 <= FpgaPins_Fpga_CPU_rs1_valid_a1;

            // Staging of $rs2.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rs2_a2[4:0] <= FpgaPins_Fpga_CPU_rs2_a1[4:0];

            // Staging of $rs2_valid.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_rs2_valid_a2 <= FpgaPins_Fpga_CPU_rs2_valid_a1;

            // Staging of $src1_value.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_src1_value_a3[31:0] <= FpgaPins_Fpga_CPU_src1_value_a2[31:0];

            // Staging of $src2_value.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_src2_value_a3[31:0] <= FpgaPins_Fpga_CPU_src2_value_a2[31:0];
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_src2_value_a4[31:0] <= FpgaPins_Fpga_CPU_src2_value_a3[31:0];

            // Staging of $valid.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_a4 <= FpgaPins_Fpga_CPU_valid_a3;

            // Staging of $valid_jump.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_jump_a4 <= FpgaPins_Fpga_CPU_valid_jump_a3;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_jump_a5 <= FpgaPins_Fpga_CPU_valid_jump_a4;

            // Staging of $valid_load.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_load_a4 <= FpgaPins_Fpga_CPU_valid_load_a3;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_load_a5 <= FpgaPins_Fpga_CPU_valid_load_a4;

            // Staging of $valid_taken_br.
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_taken_br_a4 <= FpgaPins_Fpga_CPU_valid_taken_br_a3;
            always_ff @(posedge clk) FpgaPins_Fpga_CPU_valid_taken_br_a5 <= FpgaPins_Fpga_CPU_valid_taken_br_a4;


            //
            // Scope: /dmem[7:0]
            //
            for (dmem = 0; dmem <= 7; dmem++) begin : L1gen_FpgaPins_Fpga_CPU_Dmem
               // Staging of $value.
               always_ff @(posedge clk) FpgaPins_Fpga_CPU_Dmem_value_a5[dmem][31:0] <= FpgaPins_Fpga_CPU_Dmem_value_a4[dmem][31:0];

            end

            //
            // Scope: /imem[15:0]
            //
            for (imem = 0; imem <= 15; imem++) begin : L1gen_FpgaPins_Fpga_CPU_Imem
               // Staging of $value.
               always_ff @(posedge clk) FpgaPins_Fpga_CPU_Imem_value_a2[imem][31:0] <= FpgaPins_Fpga_CPU_Imem_value_a1[imem][31:0];

            end

            //
            // Scope: /xreg[15:0]
            //
            for (xreg = 0; xreg <= 15; xreg++) begin : L1gen_FpgaPins_Fpga_CPU_Xreg
               // Staging of $value.
               always_ff @(posedge clk) FpgaPins_Fpga_CPU_Xreg_value_a4[xreg][31:0] <= FpgaPins_Fpga_CPU_Xreg_value_a3[xreg][31:0];
               always_ff @(posedge clk) FpgaPins_Fpga_CPU_Xreg_value_a5[xreg][31:0] <= FpgaPins_Fpga_CPU_Xreg_value_a4[xreg][31:0];

            end






/*--------------------------------------------------------------------
//
// Debug Signals
//

   if (1) begin : DEBUG_SIGS_GTKWAVE

      (* keep *) logic [7:0] \@0$slideswitch ;
      assign \@0$slideswitch = L0_slideswitch_a0;
      (* keep *) logic  \@0$sseg_decimal_point_n ;
      assign \@0$sseg_decimal_point_n = L0_sseg_decimal_point_n_a0;
      (* keep *) logic [7:0] \@0$sseg_digit_n ;
      assign \@0$sseg_digit_n = L0_sseg_digit_n_a0;
      (* keep *) logic [6:0] \@0$sseg_segment_n ;
      assign \@0$sseg_segment_n = L0_sseg_segment_n_a0;

      //
      // Scope: /digit[0:0]
      //
      for (digit = 0; digit <= 0; digit++) begin : \/digit 

         //
         // Scope: /leds[7:0]
         //
         for (leds = 0; leds <= 7; leds++) begin : \/leds 
            (* keep *) logic  \//@0$viz_lit ;
            assign \//@0$viz_lit = L1_Digit[digit].L2_Leds[leds].L2_viz_lit_a0;
         end
      end

      //
      // Scope: /fpga_pins
      //
      if (1) begin : \/fpga_pins 

         //
         // Scope: /fpga
         //
         if (1) begin : \/fpga 

            //
            // Scope: |cpu
            //
            if (1) begin : P_cpu
               (* keep *) logic [31:0] \///@2$br_tgt_pc ;
               assign \///@2$br_tgt_pc = FpgaPins_Fpga_CPU_br_tgt_pc_a2;
               (* keep *) logic [31:0] \///@4$cycle_count ;
               assign \///@4$cycle_count = FpgaPins_Fpga_CPU_cycle_count_a4;
               (* keep *) logic [10:0] \///@1$dec_bits ;
               assign \///@1$dec_bits = FpgaPins_Fpga_CPU_dec_bits_a1;
               (* keep *) logic [2:0] \///@4$dmem_addr ;
               assign \///@4$dmem_addr = FpgaPins_Fpga_CPU_dmem_addr_a4;
               (* keep *) logic [31:0] \///?$dmem_rd_en@4$dmem_rd_data ;
               assign \///?$dmem_rd_en@4$dmem_rd_data = FpgaPins_Fpga_CPU_dmem_rd_data_a4;
               (* keep *) logic  \///@4$dmem_rd_en ;
               assign \///@4$dmem_rd_en = FpgaPins_Fpga_CPU_dmem_rd_en_a4;
               (* keep *) logic [31:0] \///@4$dmem_wr_data ;
               assign \///@4$dmem_wr_data = FpgaPins_Fpga_CPU_dmem_wr_data_a4;
               (* keep *) logic  \///@4$dmem_wr_en ;
               assign \///@4$dmem_wr_en = FpgaPins_Fpga_CPU_dmem_wr_en_a4;
               (* keep *) logic [2:0] \///?$func3_valid@1$func3 ;
               assign \///?$func3_valid@1$func3 = FpgaPins_Fpga_CPU_func3_a1;
               (* keep *) logic  \///@1$func3_valid ;
               assign \///@1$func3_valid = FpgaPins_Fpga_CPU_func3_valid_a1;
               (* keep *) logic [6:0] \///?$func7_valid@1$func7 ;
               assign \///?$func7_valid@1$func7 = FpgaPins_Fpga_CPU_func7_a1;
               (* keep *) logic  \///@1$func7_valid ;
               assign \///@1$func7_valid = FpgaPins_Fpga_CPU_func7_valid_a1;
               (* keep *) logic [3:0] \///@0$imem_addr ;
               assign \///@0$imem_addr = FpgaPins_Fpga_CPU_imem_addr_a0;
               (* keep *) logic [31:0] \///?$imem_rd_en@1$imem_rd_data ;
               assign \///?$imem_rd_en@1$imem_rd_data = FpgaPins_Fpga_CPU_imem_rd_data_a1;
               (* keep *) logic  \///@0$imem_rd_en ;
               assign \///@0$imem_rd_en = FpgaPins_Fpga_CPU_imem_rd_en_a0;
               (* keep *) logic [31:0] \///@1$imem_wr_data ;
               assign \///@1$imem_wr_data = FpgaPins_Fpga_CPU_imem_wr_data_a1;
               (* keep *) logic  \///@1$imem_wr_en ;
               assign \///@1$imem_wr_en = FpgaPins_Fpga_CPU_imem_wr_en_a1;
               (* keep *) logic [31:0] \///@1$imm ;
               assign \///@1$imm = FpgaPins_Fpga_CPU_imm_a1;
               (* keep *) logic [31:0] \///@1$instr ;
               assign \///@1$instr = FpgaPins_Fpga_CPU_instr_a1;
               (* keep *) logic  \///@1$is_add ;
               assign \///@1$is_add = FpgaPins_Fpga_CPU_is_add_a1;
               (* keep *) logic  \///@1$is_addi ;
               assign \///@1$is_addi = FpgaPins_Fpga_CPU_is_addi_a1;
               (* keep *) logic  \///@1$is_and ;
               assign \///@1$is_and = FpgaPins_Fpga_CPU_is_and_a1;
               (* keep *) logic  \///@1$is_andi ;
               assign \///@1$is_andi = FpgaPins_Fpga_CPU_is_andi_a1;
               (* keep *) logic  \///@1$is_auipc ;
               assign \///@1$is_auipc = FpgaPins_Fpga_CPU_is_auipc_a1;
               (* keep *) logic  \///@1$is_b_instr ;
               assign \///@1$is_b_instr = FpgaPins_Fpga_CPU_is_b_instr_a1;
               (* keep *) logic  \///@1$is_beq ;
               assign \///@1$is_beq = FpgaPins_Fpga_CPU_is_beq_a1;
               (* keep *) logic  \///@1$is_bge ;
               assign \///@1$is_bge = FpgaPins_Fpga_CPU_is_bge_a1;
               (* keep *) logic  \///@1$is_bgeu ;
               assign \///@1$is_bgeu = FpgaPins_Fpga_CPU_is_bgeu_a1;
               (* keep *) logic  \///@1$is_blt ;
               assign \///@1$is_blt = FpgaPins_Fpga_CPU_is_blt_a1;
               (* keep *) logic  \///@1$is_bltu ;
               assign \///@1$is_bltu = FpgaPins_Fpga_CPU_is_bltu_a1;
               (* keep *) logic  \///@1$is_bne ;
               assign \///@1$is_bne = FpgaPins_Fpga_CPU_is_bne_a1;
               (* keep *) logic  \///@1$is_i_instr ;
               assign \///@1$is_i_instr = FpgaPins_Fpga_CPU_is_i_instr_a1;
               (* keep *) logic  \///@1$is_j_instr ;
               assign \///@1$is_j_instr = FpgaPins_Fpga_CPU_is_j_instr_a1;
               (* keep *) logic  \///@1$is_jal ;
               assign \///@1$is_jal = FpgaPins_Fpga_CPU_is_jal_a1;
               (* keep *) logic  \///@1$is_jalr ;
               assign \///@1$is_jalr = FpgaPins_Fpga_CPU_is_jalr_a1;
               (* keep *) logic  \///@1$is_jump ;
               assign \///@1$is_jump = FpgaPins_Fpga_CPU_is_jump_a1;
               (* keep *) logic  \///@1$is_load ;
               assign \///@1$is_load = FpgaPins_Fpga_CPU_is_load_a1;
               (* keep *) logic  \///@1$is_lui ;
               assign \///@1$is_lui = FpgaPins_Fpga_CPU_is_lui_a1;
               (* keep *) logic  \///@1$is_or ;
               assign \///@1$is_or = FpgaPins_Fpga_CPU_is_or_a1;
               (* keep *) logic  \///@1$is_ori ;
               assign \///@1$is_ori = FpgaPins_Fpga_CPU_is_ori_a1;
               (* keep *) logic  \///@1$is_r_instr ;
               assign \///@1$is_r_instr = FpgaPins_Fpga_CPU_is_r_instr_a1;
               (* keep *) logic  \///@1$is_s_instr ;
               assign \///@1$is_s_instr = FpgaPins_Fpga_CPU_is_s_instr_a1;
               (* keep *) logic  \///@1$is_sll ;
               assign \///@1$is_sll = FpgaPins_Fpga_CPU_is_sll_a1;
               (* keep *) logic  \///@1$is_slli ;
               assign \///@1$is_slli = FpgaPins_Fpga_CPU_is_slli_a1;
               (* keep *) logic  \///@1$is_slt ;
               assign \///@1$is_slt = FpgaPins_Fpga_CPU_is_slt_a1;
               (* keep *) logic  \///@1$is_slti ;
               assign \///@1$is_slti = FpgaPins_Fpga_CPU_is_slti_a1;
               (* keep *) logic  \///@1$is_sltiu ;
               assign \///@1$is_sltiu = FpgaPins_Fpga_CPU_is_sltiu_a1;
               (* keep *) logic  \///@1$is_sltu ;
               assign \///@1$is_sltu = FpgaPins_Fpga_CPU_is_sltu_a1;
               (* keep *) logic  \///@1$is_sra ;
               assign \///@1$is_sra = FpgaPins_Fpga_CPU_is_sra_a1;
               (* keep *) logic  \///@1$is_srai ;
               assign \///@1$is_srai = FpgaPins_Fpga_CPU_is_srai_a1;
               (* keep *) logic  \///@1$is_srl ;
               assign \///@1$is_srl = FpgaPins_Fpga_CPU_is_srl_a1;
               (* keep *) logic  \///@1$is_srli ;
               assign \///@1$is_srli = FpgaPins_Fpga_CPU_is_srli_a1;
               (* keep *) logic  \///@1$is_sub ;
               assign \///@1$is_sub = FpgaPins_Fpga_CPU_is_sub_a1;
               (* keep *) logic  \///@1$is_u_instr ;
               assign \///@1$is_u_instr = FpgaPins_Fpga_CPU_is_u_instr_a1;
               (* keep *) logic  \///@1$is_xor ;
               assign \///@1$is_xor = FpgaPins_Fpga_CPU_is_xor_a1;
               (* keep *) logic  \///@1$is_xori ;
               assign \///@1$is_xori = FpgaPins_Fpga_CPU_is_xori_a1;
               (* keep *) logic [31:0] \///@2$jalr_tgt_pc ;
               assign \///@2$jalr_tgt_pc = FpgaPins_Fpga_CPU_jalr_tgt_pc_a2;
               (* keep *) logic [31:0] \///@4$ld_data ;
               assign \///@4$ld_data = FpgaPins_Fpga_CPU_ld_data_a4;
               (* keep *) logic [6:0] \///@1$opcode ;
               assign \///@1$opcode = FpgaPins_Fpga_CPU_opcode_a1;
               (* keep *) logic [31:0] \///@0$pc ;
               assign \///@0$pc = FpgaPins_Fpga_CPU_pc_a0;
               (* keep *) logic [4:0] \///?$rd_valid@1$rd ;
               assign \///?$rd_valid@1$rd = FpgaPins_Fpga_CPU_rd_a1;
               (* keep *) logic  \///@1$rd_valid ;
               assign \///@1$rd_valid = FpgaPins_Fpga_CPU_rd_valid_a1;
               (* keep *) logic  \///@0$reset ;
               assign \///@0$reset = FpgaPins_Fpga_CPU_reset_a0;
               (* keep *) logic [31:0] \///@3$result ;
               assign \///@3$result = FpgaPins_Fpga_CPU_result_a3;
               (* keep *) logic [31:0] \///?$rf_rd_en1@2$rf_rd_data1 ;
               assign \///?$rf_rd_en1@2$rf_rd_data1 = FpgaPins_Fpga_CPU_rf_rd_data1_a2;
               (* keep *) logic [31:0] \///?$rf_rd_en2@2$rf_rd_data2 ;
               assign \///?$rf_rd_en2@2$rf_rd_data2 = FpgaPins_Fpga_CPU_rf_rd_data2_a2;
               (* keep *) logic  \///@2$rf_rd_en1 ;
               assign \///@2$rf_rd_en1 = FpgaPins_Fpga_CPU_rf_rd_en1_a2;
               (* keep *) logic  \///@2$rf_rd_en2 ;
               assign \///@2$rf_rd_en2 = FpgaPins_Fpga_CPU_rf_rd_en2_a2;
               (* keep *) logic [4:0] \///@2$rf_rd_index1 ;
               assign \///@2$rf_rd_index1 = FpgaPins_Fpga_CPU_rf_rd_index1_a2;
               (* keep *) logic [4:0] \///@2$rf_rd_index2 ;
               assign \///@2$rf_rd_index2 = FpgaPins_Fpga_CPU_rf_rd_index2_a2;
               (* keep *) logic [31:0] \///@3$rf_wr_data ;
               assign \///@3$rf_wr_data = FpgaPins_Fpga_CPU_rf_wr_data_a3;
               (* keep *) logic  \///@3$rf_wr_en ;
               assign \///@3$rf_wr_en = FpgaPins_Fpga_CPU_rf_wr_en_a3;
               (* keep *) logic [4:0] \///@3$rf_wr_index ;
               assign \///@3$rf_wr_index = FpgaPins_Fpga_CPU_rf_wr_index_a3;
               (* keep *) logic [4:0] \///?$rs1_valid@1$rs1 ;
               assign \///?$rs1_valid@1$rs1 = FpgaPins_Fpga_CPU_rs1_a1;
               (* keep *) logic  \///@1$rs1_valid ;
               assign \///@1$rs1_valid = FpgaPins_Fpga_CPU_rs1_valid_a1;
               (* keep *) logic [4:0] \///?$rs2_valid@1$rs2 ;
               assign \///?$rs2_valid@1$rs2 = FpgaPins_Fpga_CPU_rs2_a1;
               (* keep *) logic  \///@1$rs2_valid ;
               assign \///@1$rs2_valid = FpgaPins_Fpga_CPU_rs2_valid_a1;
               (* keep *) logic  \///@3$sltiu_rslt ;
               assign \///@3$sltiu_rslt = FpgaPins_Fpga_CPU_sltiu_rslt_a3;
               (* keep *) logic  \///@3$sltu_rslt ;
               assign \///@3$sltu_rslt = FpgaPins_Fpga_CPU_sltu_rslt_a3;
               (* keep *) logic [31:0] \///@4$spi_csr_out ;
               assign \///@4$spi_csr_out = FpgaPins_Fpga_CPU_spi_csr_out_a4;
               (* keep *) logic [31:0] \///@4$spi_current_instr ;
               assign \///@4$spi_current_instr = FpgaPins_Fpga_CPU_spi_current_instr_a4;
               (* keep *) logic [31:0] \///@2$src1_value ;
               assign \///@2$src1_value = FpgaPins_Fpga_CPU_src1_value_a2;
               (* keep *) logic [31:0] \///@2$src2_value ;
               assign \///@2$src2_value = FpgaPins_Fpga_CPU_src2_value_a2;
               (* keep *) logic  \///@3$taken_br ;
               assign \///@3$taken_br = FpgaPins_Fpga_CPU_taken_br_a3;
               (* keep *) logic  \///@3$valid ;
               assign \///@3$valid = FpgaPins_Fpga_CPU_valid_a3;
               (* keep *) logic  \///@3$valid_jump ;
               assign \///@3$valid_jump = FpgaPins_Fpga_CPU_valid_jump_a3;
               (* keep *) logic  \///@3$valid_load ;
               assign \///@3$valid_load = FpgaPins_Fpga_CPU_valid_load_a3;
               (* keep *) logic  \///@3$valid_taken_br ;
               assign \///@3$valid_taken_br = FpgaPins_Fpga_CPU_valid_taken_br_a3;

               //
               // Scope: /dmem[7:0]
               //
               for (dmem = 0; dmem <= 7; dmem++) begin : \/dmem 
                  (* keep *) logic [31:0] \////@4$value ;
                  assign \////@4$value = FpgaPins_Fpga_CPU_Dmem_value_a4[dmem];
                  (* keep *) logic  \////@4$wr ;
                  assign \////@4$wr = L1_FpgaPins_Fpga_CPU_Dmem[dmem].L1_wr_a4;
               end

               //
               // Scope: /imem[15:0]
               //
               for (imem = 0; imem <= 15; imem++) begin : \/imem 
                  (* keep *) logic [31:0] \////@1$value ;
                  assign \////@1$value = FpgaPins_Fpga_CPU_Imem_value_a1[imem];
                  (* keep *) logic  \////@1$wr ;
                  assign \////@1$wr = L1_FpgaPins_Fpga_CPU_Imem[imem].L1_wr_a1;
               end

               //
               // Scope: /xreg[15:0]
               //
               for (xreg = 0; xreg <= 15; xreg++) begin : \/xreg 
                  (* keep *) logic [31:0] \////@3$value ;
                  assign \////@3$value = FpgaPins_Fpga_CPU_Xreg_value_a3[xreg];
                  (* keep *) logic  \////@3$wr ;
                  assign \////@3$wr = L1_FpgaPins_Fpga_CPU_Xreg[xreg].L1_wr_a3;
               end
            end
         end
      end

      //
      // Scope: /switch[7:0]
      //
      for (switch = 0; switch <= 7; switch++) begin : \/switch 
         (* keep *) logic  \/@0$viz_switch ;
         assign \/@0$viz_switch = L1_Switch[switch].L1_viz_switch_a0;
      end


   end
----------------------------------------------------------------------------------*/
// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 76   // Instantiated from top.tlv, 601 as: m5+tt_connections()
   //   assign L0_slideswitch_a0[7:0] = ui_in;
   //   assign L0_sseg_segment_n_a0[6:0] = ~ uo_out[6:0];
   //   assign L0_sseg_decimal_point_n_a0 = ~ uo_out[7];
   //   assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
   //_\end_source

   // Instantiate the Virtual FPGA Lab.
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 307   // Instantiated from top.tlv, 604 as: m5+board(/top, /fpga, 7, $, , cpu)
      
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 355   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 309 as: m4+thanks(m5__l(309)m5_eval(m5_get(BOARD_THANKS_ARGS)))
         //_/thanks
            
      //_\end_source
      
   
      // Board VIZ.
   
      // Board Image.
      
      //_/fpga_pins
         
         //_/fpga
            //_\source top.tlv 54   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 340 as: m4+cpu.
            
               //_|cpu
                  //_@0
                     assign FpgaPins_Fpga_CPU_reset_a0 = reset || spi_cpu_rst;
            
                     assign FpgaPins_Fpga_CPU_pc_a0[31:0] = (FpgaPins_Fpga_CPU_reset_a1)                     ? 32'd0 :
                                 (FpgaPins_Fpga_CPU_valid_taken_br_a3)            ? FpgaPins_Fpga_CPU_br_tgt_pc_a3 :  // if branch load pc with next instr after 2-cycle delay
                                 (FpgaPins_Fpga_CPU_valid_load_a3)                ? FpgaPins_Fpga_CPU_pc_a3 + 32'd4 : // if load load pc with next instr after 2-cycle delay
                                 (FpgaPins_Fpga_CPU_valid_jump_a3 && FpgaPins_Fpga_CPU_is_jal_a3)  ? FpgaPins_Fpga_CPU_br_tgt_pc_a3 :
                                 (FpgaPins_Fpga_CPU_valid_jump_a4 && FpgaPins_Fpga_CPU_is_jalr_a3) ? FpgaPins_Fpga_CPU_jalr_tgt_pc_a3 :
                                                                   FpgaPins_Fpga_CPU_pc_a1 + 32'd4;
            
                     // instruction fetch
                     assign FpgaPins_Fpga_CPU_imem_rd_en_a0 = !FpgaPins_Fpga_CPU_reset_a0;
                     assign FpgaPins_Fpga_CPU_imem_addr_a0[3:0] = (FpgaPins_Fpga_CPU_reset_a0) ? spi_prog_addr : FpgaPins_Fpga_CPU_pc_a0[5:2];
            
                  //_@1
                     for (imem = 0; imem <= 15; imem++) begin : L1_FpgaPins_Fpga_CPU_Imem //_/imem

                        // For $wr.
                        logic L1_wr_a1;

                        assign L1_wr_a1 = FpgaPins_Fpga_CPU_imem_wr_en_a1 && (FpgaPins_Fpga_CPU_imem_addr_a1[3:0] == imem);
                        assign FpgaPins_Fpga_CPU_Imem_value_a1[imem][31:0] = reset ? imem :
                                       L1_wr_a1    ? FpgaPins_Fpga_CPU_imem_wr_data_a1 :
                                                FpgaPins_Fpga_CPU_Imem_value_a2[imem][31:0];
                     end
                     //_?$imem_rd_en
                        assign FpgaPins_Fpga_CPU_imem_rd_data_a1[31:0] = FpgaPins_Fpga_CPU_Imem_value_a2[FpgaPins_Fpga_CPU_imem_addr_a1[3:0]];
            
            
                     assign FpgaPins_Fpga_CPU_imem_wr_en_a1 = spi_imem_wr_en;
                     assign FpgaPins_Fpga_CPU_imem_wr_data_a1[31:0] = spi_prog_instr;
            
                     // decode
                     assign FpgaPins_Fpga_CPU_instr_a1[31:0] = FpgaPins_Fpga_CPU_imem_rd_data_a1[31:0];
            
                     // instruction types
                     assign FpgaPins_Fpga_CPU_is_i_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:3] == 4'b0000 || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b00100
                                   || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b00110 || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b11001;
                     assign FpgaPins_Fpga_CPU_is_r_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b01011 || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b01100
                                   || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b01110 || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b10100;
                     assign FpgaPins_Fpga_CPU_is_u_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b00101 || FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b01101;
                     assign FpgaPins_Fpga_CPU_is_b_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b11000;
                     assign FpgaPins_Fpga_CPU_is_j_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:2] == 5'b11011;
                     assign FpgaPins_Fpga_CPU_is_s_instr_a1 = FpgaPins_Fpga_CPU_instr_a1[6:3] == 4'b0100;
                     assign FpgaPins_Fpga_CPU_is_load_a1 = (FpgaPins_Fpga_CPU_opcode_a1 == 7'b0000011);
                     assign FpgaPins_Fpga_CPU_is_jump_a1 = (FpgaPins_Fpga_CPU_is_jal_a1 || FpgaPins_Fpga_CPU_is_jalr_a1);
            
            
                     // immediate decode
                     assign FpgaPins_Fpga_CPU_imm_a1[31:0] = (FpgaPins_Fpga_CPU_is_i_instr_a1) ? { {21{FpgaPins_Fpga_CPU_instr_a1[31]}}, FpgaPins_Fpga_CPU_instr_a1[30:20] } :
                                  (FpgaPins_Fpga_CPU_is_s_instr_a1) ? { {21{FpgaPins_Fpga_CPU_instr_a1[31]}}, FpgaPins_Fpga_CPU_instr_a1[30:25], FpgaPins_Fpga_CPU_instr_a1[11:7] } :
                                  (FpgaPins_Fpga_CPU_is_b_instr_a1) ? { {20{FpgaPins_Fpga_CPU_instr_a1[31]}}, FpgaPins_Fpga_CPU_instr_a1[7], FpgaPins_Fpga_CPU_instr_a1[30:25], FpgaPins_Fpga_CPU_instr_a1[11:8], 1'b0} :
                                  (FpgaPins_Fpga_CPU_is_u_instr_a1) ? { FpgaPins_Fpga_CPU_instr_a1[31:12], 12'b0 } :
                                  (FpgaPins_Fpga_CPU_is_j_instr_a1) ? { {12{FpgaPins_Fpga_CPU_instr_a1[31]}}, FpgaPins_Fpga_CPU_instr_a1[19:12], FpgaPins_Fpga_CPU_instr_a1[20], FpgaPins_Fpga_CPU_instr_a1[30:21], 1'b0} :
                                                  // default
                                                  32'b0;
            
                     // validity of decoded fields
                     assign FpgaPins_Fpga_CPU_rd_valid_a1 = FpgaPins_Fpga_CPU_is_r_instr_a1 || FpgaPins_Fpga_CPU_is_i_instr_a1 || FpgaPins_Fpga_CPU_is_u_instr_a1 || FpgaPins_Fpga_CPU_is_j_instr_a1;
                     assign FpgaPins_Fpga_CPU_rs1_valid_a1 = FpgaPins_Fpga_CPU_is_r_instr_a1 || FpgaPins_Fpga_CPU_is_i_instr_a1 || FpgaPins_Fpga_CPU_is_s_instr_a1 || FpgaPins_Fpga_CPU_is_b_instr_a1;
                     assign FpgaPins_Fpga_CPU_rs2_valid_a1 = FpgaPins_Fpga_CPU_is_r_instr_a1 || FpgaPins_Fpga_CPU_is_s_instr_a1 || FpgaPins_Fpga_CPU_is_b_instr_a1;
                     assign FpgaPins_Fpga_CPU_func3_valid_a1 = FpgaPins_Fpga_CPU_is_r_instr_a1 || FpgaPins_Fpga_CPU_is_i_instr_a1 || FpgaPins_Fpga_CPU_is_s_instr_a1 || FpgaPins_Fpga_CPU_is_b_instr_a1;
                     assign FpgaPins_Fpga_CPU_func7_valid_a1 = FpgaPins_Fpga_CPU_is_r_instr_a1;
            
                     // operand and control decode
                     assign FpgaPins_Fpga_CPU_opcode_a1[6:0] = FpgaPins_Fpga_CPU_instr_a1[6:0];
                     //_?$rd_valid
                        assign FpgaPins_Fpga_CPU_rd_a1[4:0] = FpgaPins_Fpga_CPU_instr_a1[11:7];
                     //_?$rs1_valid
                        assign FpgaPins_Fpga_CPU_rs1_a1[4:0] = FpgaPins_Fpga_CPU_instr_a1[19:15];
                     //_?$rs2_valid
                        assign FpgaPins_Fpga_CPU_rs2_a1[4:0] = FpgaPins_Fpga_CPU_instr_a1[24:20];
                     //_?$func3_valid
                        assign FpgaPins_Fpga_CPU_func3_a1[2:0] = FpgaPins_Fpga_CPU_instr_a1[14:12];
                     //_?$func7_valid
                        assign FpgaPins_Fpga_CPU_func7_a1[6:0] = FpgaPins_Fpga_CPU_instr_a1[31:25];
            
                     // instruction decoding (rv32i w/o R4 instrs)
                     assign FpgaPins_Fpga_CPU_dec_bits_a1[10:0] = { FpgaPins_Fpga_CPU_instr_a1[30], FpgaPins_Fpga_CPU_func3_a1, FpgaPins_Fpga_CPU_opcode_a1 };
            
                     assign FpgaPins_Fpga_CPU_is_lui_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[6:0] == 7'b0110111);
                     assign FpgaPins_Fpga_CPU_is_auipc_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[6:0] == 7'b0010111);
                     assign FpgaPins_Fpga_CPU_is_jal_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[6:0] == 7'b1101111);
                     assign FpgaPins_Fpga_CPU_is_jalr_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[6:0] == 7'b1100111);
            
                     assign FpgaPins_Fpga_CPU_is_beq_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b000_1100011);
                     assign FpgaPins_Fpga_CPU_is_bne_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b001_1100011);
                     assign FpgaPins_Fpga_CPU_is_blt_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b100_1100011);
                     assign FpgaPins_Fpga_CPU_is_bge_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b101_1100011);
                     assign FpgaPins_Fpga_CPU_is_bltu_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b110_1100011);
                     assign FpgaPins_Fpga_CPU_is_bgeu_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b111_1100011);
            
                     //$is_lb = ($dec_bits[9:0] == 10'b000_0000011);
                     //$is_lh = ($dec_bits[9:0] == 10'b001_0000011);
                     //$is_lw = ($dec_bits[9:0] == 10'b010_0000011);
                     //$is_lbu = ($dec_bits[9:0] == 10'b100_0000011);
                     //$is_lhu = ($dec_bits[9:0] == 10'b101_0000011);
            
                     //$is_sb = ($dec_bits[9:0] == 10'b000_0100011);
                     //$is_sh = ($dec_bits[9:0] == 10'b001_0100011);
                     //$is_sw = ($dec_bits[9:0] == 10'b010_0100011);
            
                     assign FpgaPins_Fpga_CPU_is_addi_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b000_0010011);
                     assign FpgaPins_Fpga_CPU_is_slti_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b010_0010011);
                     assign FpgaPins_Fpga_CPU_is_sltiu_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b011_0010011);
                     assign FpgaPins_Fpga_CPU_is_xori_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b100_0010011);
                     assign FpgaPins_Fpga_CPU_is_ori_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b110_0010011);
                     assign FpgaPins_Fpga_CPU_is_andi_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[9:0] == 10'b111_0010011);
            
                     assign FpgaPins_Fpga_CPU_is_slli_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_001_0010011);
                     assign FpgaPins_Fpga_CPU_is_srli_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_101_0010011);
                     assign FpgaPins_Fpga_CPU_is_srai_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b1_101_0010011);
            
                     assign FpgaPins_Fpga_CPU_is_add_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_000_0110011);
                     assign FpgaPins_Fpga_CPU_is_sub_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b1_000_0110011);
                     assign FpgaPins_Fpga_CPU_is_sll_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_001_0110011);
                     assign FpgaPins_Fpga_CPU_is_slt_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_010_0110011);
                     assign FpgaPins_Fpga_CPU_is_sltu_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_011_0110011);
                     assign FpgaPins_Fpga_CPU_is_xor_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_100_0110011);
                     assign FpgaPins_Fpga_CPU_is_srl_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_101_0110011);
                     assign FpgaPins_Fpga_CPU_is_sra_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b1_101_0110011);
                     assign FpgaPins_Fpga_CPU_is_or_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_110_0110011);
                     assign FpgaPins_Fpga_CPU_is_and_a1 = (FpgaPins_Fpga_CPU_dec_bits_a1[10:0] == 11'b0_111_0110011);
            
                  //_@2
                     // register file (read)
                     assign FpgaPins_Fpga_CPU_rf_rd_en1_a2 = FpgaPins_Fpga_CPU_rs1_valid_a2;
                     assign FpgaPins_Fpga_CPU_rf_rd_index1_a2[4:0] = FpgaPins_Fpga_CPU_rs1_a2;
                     assign FpgaPins_Fpga_CPU_rf_rd_en2_a2 = FpgaPins_Fpga_CPU_rs2_valid_a2;
                     assign FpgaPins_Fpga_CPU_rf_rd_index2_a2[4:0] = FpgaPins_Fpga_CPU_rs2_a2;
            
                     assign FpgaPins_Fpga_CPU_src1_value_a2[31:0] = (FpgaPins_Fpga_CPU_rf_wr_en_a3 && (FpgaPins_Fpga_CPU_rf_wr_index_a3 == FpgaPins_Fpga_CPU_rf_rd_index1_a2))
                                         ? FpgaPins_Fpga_CPU_rf_wr_data_a3 : FpgaPins_Fpga_CPU_rf_rd_data1_a2;
                     assign FpgaPins_Fpga_CPU_src2_value_a2[31:0] = (FpgaPins_Fpga_CPU_rf_wr_en_a3 && (FpgaPins_Fpga_CPU_rf_wr_index_a3 == FpgaPins_Fpga_CPU_rf_rd_index2_a2))
                                         ? FpgaPins_Fpga_CPU_rf_wr_data_a3 : FpgaPins_Fpga_CPU_rf_rd_data2_a2;
            
                     // branch target gen
                     assign FpgaPins_Fpga_CPU_br_tgt_pc_a2[31:0] = FpgaPins_Fpga_CPU_pc_a2 + FpgaPins_Fpga_CPU_imm_a2;
                     assign FpgaPins_Fpga_CPU_jalr_tgt_pc_a2[31:0] = FpgaPins_Fpga_CPU_src1_value_a2 + FpgaPins_Fpga_CPU_imm_a2;
            
                  //_@3
                     // register file (write)
                     assign FpgaPins_Fpga_CPU_rf_wr_en_a3 = (FpgaPins_Fpga_CPU_rd_valid_a3 && FpgaPins_Fpga_CPU_rd_a3 != 5'b0 && FpgaPins_Fpga_CPU_valid_a3) || FpgaPins_Fpga_CPU_valid_load_a5;
                     assign FpgaPins_Fpga_CPU_rf_wr_index_a3[4:0] = (FpgaPins_Fpga_CPU_valid_load_a5) ? FpgaPins_Fpga_CPU_rd_a5 : FpgaPins_Fpga_CPU_rd_a3;
                     assign FpgaPins_Fpga_CPU_rf_wr_data_a3[31:0] = (FpgaPins_Fpga_CPU_valid_load_a5) ? FpgaPins_Fpga_CPU_ld_data_a5 : FpgaPins_Fpga_CPU_result_a3;
            
                     // ALU
                     /* verilator lint_off WIDTH */
                     assign FpgaPins_Fpga_CPU_sltu_rslt_a3 = FpgaPins_Fpga_CPU_src1_value_a3 < FpgaPins_Fpga_CPU_src2_value_a3;
                     assign FpgaPins_Fpga_CPU_sltiu_rslt_a3 = FpgaPins_Fpga_CPU_src1_value_a3 < FpgaPins_Fpga_CPU_imm_a3;
            
                     assign FpgaPins_Fpga_CPU_result_a3[31:0] = (FpgaPins_Fpga_CPU_is_andi_a3)       ? FpgaPins_Fpga_CPU_src1_value_a3 & FpgaPins_Fpga_CPU_imm_a3 :
                                     (FpgaPins_Fpga_CPU_is_ori_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 | FpgaPins_Fpga_CPU_imm_a3 :
                                     (FpgaPins_Fpga_CPU_is_xori_a3)       ? FpgaPins_Fpga_CPU_src1_value_a3 ^ FpgaPins_Fpga_CPU_imm_a3 :
                                     (FpgaPins_Fpga_CPU_is_addi_a3 || FpgaPins_Fpga_CPU_is_load_a3 || FpgaPins_Fpga_CPU_is_s_instr_a3)
                                                      ? FpgaPins_Fpga_CPU_src1_value_a3 + FpgaPins_Fpga_CPU_imm_a3 :
                                     (FpgaPins_Fpga_CPU_is_slli_a3)       ? FpgaPins_Fpga_CPU_src1_value_a3 << FpgaPins_Fpga_CPU_imm_a3[5:0] :
                                     (FpgaPins_Fpga_CPU_is_srli_a3)       ? FpgaPins_Fpga_CPU_src1_value_a3 >> FpgaPins_Fpga_CPU_imm_a3[5:0] :
                                     (FpgaPins_Fpga_CPU_is_and_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 & FpgaPins_Fpga_CPU_src2_value_a3 :
                                     (FpgaPins_Fpga_CPU_is_or_a3)         ? FpgaPins_Fpga_CPU_src1_value_a3 | FpgaPins_Fpga_CPU_src2_value_a3 :
                                     (FpgaPins_Fpga_CPU_is_xor_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 ^ FpgaPins_Fpga_CPU_src2_value_a3 :
                                     (FpgaPins_Fpga_CPU_is_add_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 + FpgaPins_Fpga_CPU_src2_value_a3 :
                                     (FpgaPins_Fpga_CPU_is_sub_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 - FpgaPins_Fpga_CPU_src2_value_a3 :
                                     (FpgaPins_Fpga_CPU_is_sll_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 << FpgaPins_Fpga_CPU_src2_value_a3[4:0] :
                                     (FpgaPins_Fpga_CPU_is_srl_a3)        ? FpgaPins_Fpga_CPU_src1_value_a3 >> FpgaPins_Fpga_CPU_src2_value_a3[4:0] :
                                     (FpgaPins_Fpga_CPU_is_sltu_a3)       ? FpgaPins_Fpga_CPU_sltu_rslt_a3 :
                                     (FpgaPins_Fpga_CPU_is_sltiu_a3)      ? FpgaPins_Fpga_CPU_sltiu_rslt_a3 :
                                     (FpgaPins_Fpga_CPU_is_lui_a3)        ? {FpgaPins_Fpga_CPU_imm_a3[31:12], 12'b0} :
                                     (FpgaPins_Fpga_CPU_is_auipc_a3)      ? FpgaPins_Fpga_CPU_pc_a3 + FpgaPins_Fpga_CPU_imm_a3 :
                                     (FpgaPins_Fpga_CPU_is_jal_a3)        ? FpgaPins_Fpga_CPU_pc_a3 + 32'd4 :
                                     (FpgaPins_Fpga_CPU_is_jalr_a3)       ? FpgaPins_Fpga_CPU_pc_a3 + 32'd4 :
                                     (FpgaPins_Fpga_CPU_is_srai_a3)       ? { {32{FpgaPins_Fpga_CPU_src1_value_a3[31]} }, FpgaPins_Fpga_CPU_src1_value_a3} >> FpgaPins_Fpga_CPU_imm_a3[4:0] :
                                     (FpgaPins_Fpga_CPU_is_slt_a3)        ? (FpgaPins_Fpga_CPU_src1_value_a3[31] == FpgaPins_Fpga_CPU_src2_value_a3[31]) ? FpgaPins_Fpga_CPU_sltu_rslt_a3 : {31'b0, FpgaPins_Fpga_CPU_src1_value_a3[31]} :
                                     (FpgaPins_Fpga_CPU_is_slti_a3)       ? (FpgaPins_Fpga_CPU_src1_value_a3[31] == FpgaPins_Fpga_CPU_imm_a3[31]) ? FpgaPins_Fpga_CPU_sltiu_rslt_a3 : {31'b0, FpgaPins_Fpga_CPU_src1_value_a3[31]} :
                                     (FpgaPins_Fpga_CPU_is_sra_a3)        ? { {32{FpgaPins_Fpga_CPU_src1_value_a3[31]} }, FpgaPins_Fpga_CPU_src1_value_a3} >> FpgaPins_Fpga_CPU_src2_value_a3[4:0] :
                                                        32'bx;
                     /* verilator lint_on WIDTH */
            
                     // branch condition gen
                     assign FpgaPins_Fpga_CPU_taken_br_a3 = (FpgaPins_Fpga_CPU_is_beq_a3)  ? FpgaPins_Fpga_CPU_src1_value_a3 == FpgaPins_Fpga_CPU_src2_value_a3 :
                                 (FpgaPins_Fpga_CPU_is_bne_a3)  ? FpgaPins_Fpga_CPU_src1_value_a3 != FpgaPins_Fpga_CPU_src2_value_a3 :
                                 (FpgaPins_Fpga_CPU_is_blt_a3)  ? (FpgaPins_Fpga_CPU_src1_value_a3 < FpgaPins_Fpga_CPU_src2_value_a3) ^ (FpgaPins_Fpga_CPU_src1_value_a3[31] != FpgaPins_Fpga_CPU_src2_value_a3[31]) :
                                 (FpgaPins_Fpga_CPU_is_bge_a3)  ? (FpgaPins_Fpga_CPU_src1_value_a3 >= FpgaPins_Fpga_CPU_src2_value_a3) ^ (FpgaPins_Fpga_CPU_src1_value_a3[31] != FpgaPins_Fpga_CPU_src2_value_a3[31]) :
                                 (FpgaPins_Fpga_CPU_is_bltu_a3) ? FpgaPins_Fpga_CPU_src1_value_a3 < FpgaPins_Fpga_CPU_src2_value_a3 :
                                 (FpgaPins_Fpga_CPU_is_bgeu_a3) ? FpgaPins_Fpga_CPU_src1_value_a3 >= FpgaPins_Fpga_CPU_src2_value_a3 :
                                              // default
                                              1'b0;
            
                     // branch when valid
                     assign FpgaPins_Fpga_CPU_valid_taken_br_a3 = FpgaPins_Fpga_CPU_valid_a3 && FpgaPins_Fpga_CPU_taken_br_a3;
            
                     // load when valid
                     assign FpgaPins_Fpga_CPU_valid_load_a3 = FpgaPins_Fpga_CPU_valid_a3 && FpgaPins_Fpga_CPU_is_load_a3;
            
                     // jump when valid
                     assign FpgaPins_Fpga_CPU_valid_jump_a3 = FpgaPins_Fpga_CPU_valid_a3 && FpgaPins_Fpga_CPU_is_jump_a3;
            
                     // invanidate next 2-cycles for valid incorrect branch prediction, load instr, or jump
                     assign FpgaPins_Fpga_CPU_valid_a3 = (FpgaPins_Fpga_CPU_reset_a3) ? 1'b0 : !((FpgaPins_Fpga_CPU_valid_taken_br_a4 || FpgaPins_Fpga_CPU_valid_taken_br_a5) ||
                                                  (FpgaPins_Fpga_CPU_valid_load_a4 || FpgaPins_Fpga_CPU_valid_load_a5) ||
                                                  (FpgaPins_Fpga_CPU_valid_jump_a4 || FpgaPins_Fpga_CPU_valid_jump_a5));
            
                  //_@4
                     // data memory
                     assign FpgaPins_Fpga_CPU_dmem_addr_a4[2:0] = FpgaPins_Fpga_CPU_result_a4[4:2];
                     assign FpgaPins_Fpga_CPU_dmem_wr_en_a4 = FpgaPins_Fpga_CPU_valid_a4 && FpgaPins_Fpga_CPU_is_s_instr_a4 && ((FpgaPins_Fpga_CPU_result_a4[4:2] != 3'b0) || (FpgaPins_Fpga_CPU_result_a4[4:2] != 3'b001) || (FpgaPins_Fpga_CPU_result_a4[4:2] != 3'b010));
                     assign FpgaPins_Fpga_CPU_dmem_wr_data_a4[31:0] = FpgaPins_Fpga_CPU_src2_value_a4;
                     assign FpgaPins_Fpga_CPU_dmem_rd_en_a4 = FpgaPins_Fpga_CPU_is_load_a4 && ((FpgaPins_Fpga_CPU_result_a4[4:2] != 3'b0)|| (FpgaPins_Fpga_CPU_result_a4[4:2] != 3'b011));
                     assign FpgaPins_Fpga_CPU_ld_data_a4[31:0] = (FpgaPins_Fpga_CPU_result_a4[4:2] == 3'b0)   ? FpgaPins_Fpga_CPU_cycle_count_a4 :
                                      (FpgaPins_Fpga_CPU_result_a4[4:2] == 3'b001) ? FpgaPins_Fpga_CPU_spi_csr_out_a4:
                                      (FpgaPins_Fpga_CPU_result_a4[4:2] == 3'b010) ? FpgaPins_Fpga_CPU_spi_current_instr_a4 :
                                                                 FpgaPins_Fpga_CPU_dmem_rd_data_a4[31:0];
            
                     // CSRs
                     assign FpgaPins_Fpga_CPU_cycle_count_a4[31:0] = (FpgaPins_Fpga_CPU_reset_a4) ? 32'd0 : FpgaPins_Fpga_CPU_cycle_count_a5 + 1;  // dmem[0]
                     assign FpgaPins_Fpga_CPU_spi_csr_out_a4[31:0] = spi_csr[31:0];                          // dmem[1]
                     assign FpgaPins_Fpga_CPU_spi_current_instr_a4[31:0] = spi_prog_instr;                   // dmem[2]
            
            
            
            
            
               // Assert these to end simulation (before Makerchip cycle limit).
               // Note, for Makerchip simulation these are passed in uo_out to top-level module's passed/failed signals.
               assign passed = FpgaPins_Fpga_CPU_Xreg_value_a5[10] == 45;
               assign failed = ! passed;
            
               // Connect Tiny Tapeout outputs. Note that uio_ outputs are not available in the Tiny-Tapeout-3-based FPGA boards.
               //*uo_out = {6'b0, *failed, *passed};
               // assign uio_out = 8'b0;
               // assign uio_oe = 8'b0;
            
               // Macro instantiations to be uncommented when instructed for:
               //  o instruction memory
               //  o register file
               //  o data memory
               //  o CPU visualization
               //_|cpu
                  //m4+imem(@1)    // Args: (read stage)
                  //_\source /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/riscvshelllib.tlv 33   // Instantiated from top.tlv, 292 as: m4+rf(@2, @3)
                     // logic File
                     //_@3
                        for (xreg = 0; xreg <= 15; xreg++) begin : L1_FpgaPins_Fpga_CPU_Xreg //_/xreg

                           // For $wr.
                           logic L1_wr_a3;

                           assign L1_wr_a3 = FpgaPins_Fpga_CPU_rf_wr_en_a3 && (FpgaPins_Fpga_CPU_rf_wr_index_a3 != 5'b0) && (FpgaPins_Fpga_CPU_rf_wr_index_a3 == xreg);
                           assign FpgaPins_Fpga_CPU_Xreg_value_a3[xreg][31:0] = FpgaPins_Fpga_CPU_reset_a3 ?   xreg           :
                                          L1_wr_a3        ?   FpgaPins_Fpga_CPU_rf_wr_data_a3 :
                                                         FpgaPins_Fpga_CPU_Xreg_value_a4[xreg][31:0];
                        end
                     //_@2
                        //_?$rf_rd_en1
                           assign FpgaPins_Fpga_CPU_rf_rd_data1_a2[31:0] = FpgaPins_Fpga_CPU_Xreg_value_a4[FpgaPins_Fpga_CPU_rf_rd_index1_a2[3:0]];
                        //_?$rf_rd_en2
                           assign FpgaPins_Fpga_CPU_rf_rd_data2_a2[31:0] = FpgaPins_Fpga_CPU_Xreg_value_a4[FpgaPins_Fpga_CPU_rf_rd_index2_a2[3:0]];
                        `BOGUS_USE(FpgaPins_Fpga_CPU_rf_rd_data1_a2 FpgaPins_Fpga_CPU_rf_rd_data2_a2)
                  //_\end_source  // Args: (read stage, write stage) - if equal, no register bypass is required
                  //_\source /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/riscvshelllib.tlv 50   // Instantiated from top.tlv, 293 as: m4+dmem(@4)
                     // Data Memory
                     //_@4
                        for (dmem = 0; dmem <= 7; dmem++) begin : L1_FpgaPins_Fpga_CPU_Dmem //_/dmem

                           // For $wr.
                           logic L1_wr_a4;

                           assign L1_wr_a4 = FpgaPins_Fpga_CPU_dmem_wr_en_a4 && (FpgaPins_Fpga_CPU_dmem_addr_a4[2:0] == dmem);
                           assign FpgaPins_Fpga_CPU_Dmem_value_a4[dmem][31:0] = FpgaPins_Fpga_CPU_reset_a4 ?   dmem :
                                          L1_wr_a4        ?   FpgaPins_Fpga_CPU_dmem_wr_data_a4 :
                                                         FpgaPins_Fpga_CPU_Dmem_value_a5[dmem][31:0];
                        end
                  
                        //_?$dmem_rd_en
                           assign FpgaPins_Fpga_CPU_dmem_rd_data_a4[31:0] = FpgaPins_Fpga_CPU_Dmem_value_a5[FpgaPins_Fpga_CPU_dmem_addr_a4[2:0]];
                        `BOGUS_USE(FpgaPins_Fpga_CPU_dmem_rd_data_a4)
                  //_\end_source    // Args: (read/write stage)
            
               //m4+cpu_viz(@4)    // For visualisation, argument should be at least equal to the last stage of CPU logic. @4 would work for all labs.
            //_\end_source
   
      // LEDs.
      
   /*-------------------------------------------------------
      // 7-Segment
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 395   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_sseg.
         for (digit = 0; digit <= 0; digit++) begin : L1_Digit //_/digit
            
            for (leds = 0; leds <= 7; leds++) begin : L2_Leds //_/leds

               // For $viz_lit.
               logic L2_viz_lit_a0;

               assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
               
            end
         end
      //_\end_source
   
      // slideswitches
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 454   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 349 as: m4+fpga_switch.
         for (switch = 0; switch <= 7; switch++) begin : L1_Switch //_/switch

            // For $viz_switch.
            logic L1_viz_switch_a0;

            assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
            
         end
      //_\end_source
   
      // pushbuttons
      
   //_\end_source
   // Label the switch inputs [0..7] (1..8 on the physical switch panel) (top-to-bottom).
   //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 82   // Instantiated from top.tlv, 606 as: m5+tt_input_labels_viz(⌈"UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED"⌉)
      for (input_label = 0; input_label <= 7; input_label++) begin : L1_InputLabel //_/input_label
         
      end
   //_\end_source
-------------------------------------------*/
//_\SV
endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
